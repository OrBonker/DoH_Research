from scapy.layers.tls.record import TLS, TLSApplicationData
from extractor.time_series.flow_clumps import Clump, FlowClumpsContainer


class Processor:
    """ This class is useful for organizing and analyzing network traffic data, 
    particularly in identifying sequences of related packets within a flow. """
    def __init__(self, flow):
        self.flow = flow
        self._segment_size = 20


    def clumps(self):
        """ Generator that processes packets in the flow and groups them into clumps. """
        current_clump = None
        for packet, direction in self.flow.packets:
            if TLS not in packet:
                continue
            if TLSApplicationData not in packet:
                continue
            if len(packet[TLSApplicationData]) < 40:
                # PING frame (len = 34) or other useless frames
                continue
            if current_clump is None:
                current_clump = Clump(direction=direction)
            if not current_clump.accepts(packet, direction):
                yield current_clump
                current_clump = Clump(direction=direction)
            current_clump.add_packet(packet)
        if current_clump is not None:
            yield current_clump

    def create_flow_clumps_container(self):
        """ Creates a FlowClumpsContainer that holds the flow and the clumps generated by the clumps method. """
        return FlowClumpsContainer(flow=self.flow, clumps=self.clumps())
